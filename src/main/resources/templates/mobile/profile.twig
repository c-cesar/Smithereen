{# @pebvariable name="user" type="smithereen.model.User" #}
{%extends "page"%}
{% macro profileSection(_context, title, editURL, fields) %}
	{% set isSelf=(_context.currentUser is not null and _context.currentUser.id==_context.user.id) %}
	{% if fields is not empty or isSelf %}
	<div class="card profileFields">
	{% if title is not empty %}
	<div class="sectionHeader">
		{% if isSelf %}<a href="{{ editURL }}">{{ L('edit') }}</a>{% endif %}
		<h4>{{ title }}</h4>
	</div>
	{% endif %}
	{% for fld in fields %}
	<div class="profileFieldName">{{ fld.name }}</div>
	<div class="profileFieldValue">{% if fld.html %}{{ fld.value | postprocessHTML(keepLinksRel=true) }}{% else %}{{ fld.value | nl2br }}{% endif %}</div>
	{% else %}
	<div class="emptyState">{{ L('profile_no_info') }}</div>
	{% endfor %}
	</div>
	{% endif %}
{% endmacro %}
{% block headerActionButtons %}
	{% set options=[] %}
	{%if currentUser is not null and currentUser.id!=user.id%}
		{% set _=options.add({'label': L(isBookmarked ? 'remove_bookmark' : 'add_bookmark').toString(), 'type': 'link', 'ajax': 'box', 'href': "/users/#{user.id}/#{isBookmarked ? 'removeBookmark' : 'addBookmark'}?csrf=#{csrf}"}) %}
	{% if isBlocked %}
		{% set _=options.add({'label': L('unblock_user_X', {'name': user.firstAndGender}).toString(), 'type': 'confirm', 'title': L('unblock').toString(), 'msg': L('confirm_unblock_user_X', {'name': user.firstLastAndGender}).toString(), 'url': "/users/#{user.id}/unblock"}) %}
	{% else %}
		{% set _=options.add({'label': L('block_user_X', {'name': user.firstAndGender}).toString(), 'type': 'confirm', 'title': L('block').toString(), 'msg': L('confirm_block_user_X', {'name': user.firstLastAndGender}).toString(), 'url': "/users/#{user.id}/block"}) %}
	{% endif %}
	{%endif%}
	{% if userPermissions is not null and userPermissions.canReport(user) %}
		{% set _=options.add({'label': L('report').toString(), 'type': 'link', 'ajax': 'box', 'href': "/system/reportForm?type=user&id="+user.id}) %}
	{% endif %}
	{% if userPermissions.hasPermission('MANAGE_USERS') %}
		{% set _=options.add({'label': L('admin_manage_user').toString(), 'type': 'link', 'href': "/users/#{user.id}/meminfo"}) %}
	{% endif %}
	{% block optionsButton %}
	{% if options is not empty %}
    <button title="{{ L('more_options') }}" class="actionButton iconMore" onclick="new MobileOptionsBox({{ json(options) }}).show()" id="profileMoreButton"></button>
    {% endif %}
    {% endblock %}
{% endblock %}
{%block content%}
<div class="cardsBackdrop">
{% if movedTo is not null %}
<div class="card padded">
	{{ L('profile_moved', {'name': user | name('first')}) }}<br/>
	{% if movedTo.domain is empty %}
	<a href="{{ movedTo.profileURL }}"><b>{{ movedTo | name }}</b></a>
	{% else %}
	<a href="{{ movedTo.profileURL }}">{{ L('profile_moved_link', {'domain': movedTo.domain, 'name': movedTo | name}) }}</a>
	{% endif %}
</div>
{% elseif user.domain is not null %}
<div class="card padded">
	{{L('incomplete_profile')}}<br/>
	<a href="{{user.url}}" target="_blank">{{L('open_on_server_X', {'domain': user.domain})}}</a>
</div>
{%endif%}
{% if user.banInfo is not null and currentUser is not null and userPermissions.hasPermission('MANAGE_USERS') %}
<div class="card padded textByItself">
	{% if user.banStatus=='FROZEN' %}
	<p>{{ L('admin_user_state_frozen', {'expirationTime': user.banInfo.expiresAt is null ? L('email_account_frozen_until_first_login') : LD(user.banInfo.expiresAt)}) }}</p>
	{% elseif user.banStatus=='SUSPENDED' %}
	{% if user.domain is empty %}
	<p>{{ L('admin_user_state_suspended', {'deletionTime': LD(accountDeletionTime)}) }}</p>
	{% else %}
	<p>{{ L('admin_user_state_suspended_foreign') }}</p>
	{% endif %}
	{% elseif user.banStatus=='HIDDEN' %}
	<p>{{ L('admin_user_state_hidden') }}</p>
	{% elseif user.banStatus=='SELF_DEACTIVATED' %}
	<p>{{ L('admin_user_state_self_deactivated', {'deletionTime': LD(accountDeletionTime)}) }}</p>
	{% endif %}
	{% if user.banInfo is not null %}
	{% if user.banInfo.suspendedOnRemoteServer %}<p>{{ L('admin_user_suspended_remotely') }}</p>{% endif %}
	<p>{% if banModerator is not null %}<a href="{{ banModerator.profileURL }}">{{ banModerator | name }}</a>, {% endif %}{{ LD(user.banInfo.bannedAt()) }}</p>
	{% if user.banInfo.message is not empty %}<p>{{ L('admin_user_ban_message') }}: {{ user.banInfo.message }}</p>{% endif %}
	{% endif %}
</div>
{% endif %}
<input type="checkbox" id="profileInfoToggler" class="toggler"/>
<div class="toggled">
<div class="card singleColumn">
	<div class="profileHeader" id="profileHeader">
		<div class="profileHeaderAva">
			{% if currentUser is not null and currentUser.id==user.id %}
			<a href="javascript:void(0)" onclick="new MobileOptionsBox([
			{%- if avatarPvInfo is not null %}{label: '{{ L('avatar_open') }}', onclick: function(){doOpenPhotoViewer({{ json(avatarPvInfo) }});} },{% endif -%}
			{label: '{{ L('update_profile_picture') }}', onclick: function(){chooseFileAndUpload('/settings/updateProfilePicture', 'file', 'image/*');} }
			{%- if user.hasAvatar %},{label: '{{ L('remove_profile_picture') }}', type: 'confirm', title: 'remove_profile_picture', msg: 'confirm_remove_profile_picture', url: '/settings/removeProfilePicture'}{% endif -%}]).show(); return false;">{{ user | pictureForAvatar('b') }}</a>
			{% elseif avatarPvInfo is not null %}
			<a href="{{ avatarPhoto.url }}" data-pv="{{ json(avatarPvInfo) }}" onclick="return openPhotoViewer(this)">{{ user | pictureForAvatar('b') }}</a>
			{% else %}
			{{ user | pictureForAvatar('b') }}
			{% endif %}
		</div>
		<div class="profileNameW" id="profileHeaderNameW">
			<div class="profileName">{{ user | name('complete') }}</div>
			{% if presence is not null %}
			<div class="profilePresence">
			{%- if presence.online %}
			{{- L('user_online') }}
			{%- else %}
			{{- L('user_last_seen', {'gender': user.gender, 'date': LD(presence.lastUpdated)}) }}
			{%- endif %}
			{% if presence.mobile %}<span class="mobileOnlineIcon"></span>{% endif %}
			</div>
			{% endif %}
		</div>
	</div>
	{% if currentUser is not null and currentUser.id!=user.id and not isSelfBlocked and movedTo is null %}
		{% if friendshipStatusText is not empty and (followRequested or (followedBy and not isFriend)) %}<div class="profileFriendshipStatusText">{{ friendshipStatusText }}</div>{% endif %}
		<div class="profileBelowAva">
			{% if canMessage %}
			<a href="/my/mail/compose?to={{ user.id }}" class="button">{{ L('profile_write_message_short') }}</a>
			{% else %}
			<a href="javascript:void(0)" class="button disabled">{{ L('profile_write_message_short') }}</a>
			{% endif %}
			{%if not(isFriend) and not(following) and not(friendRequestSent) and not(followRequested)%}
			{%if user.supportsFriendRequests%}
				{% if friendRequestRecvd %}
					<a href="/users/{{ user.id }}/respondToFriendRequest?csrf={{csrf}}&accept" class="button secondary" onclick="return showOptions(this)" data-options="{{ json([
						{'label': L('accept').toString(), 'href': "/users/#{user.id}/respondToFriendRequest?accept", 'ajax': 'box'},
						{'label': L('decline').toString(), 'href': "/users/#{user.id}/respondToFriendRequest?decline", 'ajax': 'box'}
					]) }}"><span class="ellipsize">{{ L("profile_user_friend_request_received") }}</span><span class="arrowIcon"></span></a>
				{% else %}
					<a href="/users/{{ user.id }}/confirmSendFriendRequest?csrf={{csrf}}" class="button ellipsize" data-ajax-box>{{L("add_friend")}}</a>
				{% endif %}
			{%else%}
				<a href="/users/{{ user.id }}/confirmSendFriendRequest?csrf={{csrf}}" class="button ellipsize" data-ajax>{{L("follow")}}</a>
			{%endif%}
			{% else %}
				{% block friendButton %}
				{% set buttonOptions=[{'label': L(isFriend ? 'remove_friend' : 'unfollow').toString(), 'href': "/users/#{user.id}/confirmRemoveFriend", 'type': 'confirm', 'title':  L(isFriend ? 'remove_friend' : 'unfollow').toString(), 'msg': L(following or followRequested ? 'confirm_unfollow_X' : 'confirm_unfriend_X', {'name': user.firstLastAndGender}).toString(), 'url': "/users/#{user.id}/doRemoveFriend"}] %}
				{% if canMute %}
				{% set _=buttonOptions.add({'label' : L(isMuted ? 'profile_unmute' : 'profile_mute', {'name': user.firstAndGender}).toString(), 'href': "/users/#{user.id}/#{isMuted ? 'unmute' : 'mute'}?csrf=#{csrf}", 'type': 'link', 'ajax': 'box'}) %}
				{% endif %}
				{% if isFriend %}
				{% set _=buttonOptions.add({'label': L('friend_set_lists').toString(), 'href': "/users/#{user.id}/setListsMobileBox", 'type': 'link', 'ajax': 'box'}) %}
				{% endif %}
				<a href="/users/{{ user.id }}/confirmRemoveFriend" class="button secondary" id="profileFriendButton" onclick="return showOptions(this)" data-options="{{ json(buttonOptions) }}"><span class="ellipsize">
					{% if isFriend %}
					{{ L('profile_user_is_friend') }}
					{% elseif friendRequestSent %}
					{{ L('profile_user_friend_request_sent') }}
					{% else %}
					{{ L('profile_user_you_follow') }}
					{% endif %}
				</span><span class="arrowIcon"></span></a>
				{% endblock %}
			{%endif%}
		</div>
	{%endif%}
	<ul class="profileInfoRows">
		{% if currentUser is not null and user.id==currentUser.id %}
		<li><a href="/settings/mobileStatusForm" class="multiline" data-ajax-box>
			<span class="icon iconStatus"></span>
			<span class="text">{{ user.statusText | default(L('update_status')) }}</span>
		</a></li>
		{% elseif user.statusText is not empty %}
		<li><div class="item multiline">
			<span class="icon iconStatus"></span>
			<span class="text">{{ user.statusText }}</span>
		</div></li>
		{% endif %}
		{% if user.friendsCount>0 %}
		<li><a href="/users/{{ user.id }}/friends">
			<span class="icon iconFriends"></span>
			<span class="text ellipsize">{{ L('X_friends_bold', {'count': user.friendsCount}) }}{%- if mutualFriendCount>0 %} Â· {{ L('X_mutual_friends_short_bold', {'count': mutualFriendCount}) }}{% endif %}</span>
			<span class="accessory avatarPile">
			{% if mutualFriends is not empty %}
			{% for friend in mutualFriends | slice(0, min(mutualFriends | length, 3)) %}
			    {{ friend | pictureForAvatar('s', 28) }}
			{% endfor %}
			{% endif %}
			{% if mutualFriends | length<3 %}
			{% for friend in friends | slice(0, min(friends | length, 3-(mutualFriends | default([]) | length))) %}
			    {{ friend | pictureForAvatar('s', 28) }}
			{% endfor %}
			{% endif %}
			</span>
		</a></li>
		{% endif %}
		{% if user.followersCount>0 %}
		<li><a href="/users/{{ user.id }}/followers">
			<span class="icon iconFollowers"></span>
			<span class="text ellipsize">{{ L('X_followers_bold', {'count': user.followersCount}) }}</span>
		</a></li>
		{% endif %}
		{% if user.location is not empty %}
		<li><div class="item">
			<span class="icon iconHome"></span>
			<span class="text ellipsize">{{ L('profile_city') }}: {{ user.location }}</span>
		</div></li>
		{% endif %}
		{% if isSelf or mainFields is not empty or contactsFields is not empty or personalFields is not empty or interestsFields is not empty %}
		<li><label class="item showMore hideWhenOn" for="profileInfoToggler" tabindex="0">
			<span class="icon iconMore"></span>
			<span class="text ellipsize">{{ L('profile_show_info') }}</span>
		</label></li>
		{% endif %}
	</ul>
</div>

<div class="showWhenOn">
{{ profileSection(_context, null, null, mainFields) }}
{{ profileSection(_context, L('profile_contacts_title'), "/settings/profile/contacts", contactsFields) }}
{{ profileSection(_context, L('profile_personal_title'), "/settings/profile/personal", personalFields) }}
{{ profileSection(_context, L('profile_interests_title'), "/settings/profile/interests", interestsFields) }}
</div>

</div>

{% include "profile_section_thumbs" with {'actor': user} %}

{% include "wall_profile_block" with {'wallOwner': user} %}
</div>
{% script %}
initProfileTitleHideOnScroll();
{% endscript %}
{%endblock%}