{# @pebvariable name="user" type="smithereen.model.User" #}
{%extends "page"%}
{% macro profileSection(_context, title, editURL, fields) %}
	{% set isSelf=(_context.currentUser is not null and _context.currentUser.id==_context.user.id) %}
	{% if fields is not empty or isSelf %}
	{% if title is not empty %}
	<div class="sectionHeader">
		<h4>{{ title }}</h4>
		<div class="line"></div>
		{% if isSelf %}<a href="{{ editURL }}">{{ L('edit') }}</a>{% endif %}
	</div>
	{% endif %}
	{% for fld in fields %}
	<div class="label">{{ fld.name }}:</div>
	<div>{% if fld.html %}{{ fld.value | postprocessHTML(keepLinksRel=true) }}{% else %}{{ fld.value | nl2br }}{% endif %}</div>
	{% else %}
	<div class="empty">{{ L('profile_no_info') }}</div>
	{% endfor %}
	{% endif %}
{% endmacro %}
{% block navBarExtra %}
{% if presence is not null %}
<span class="flR auxText">
{%- if presence.online %}
{{- L('user_online') }}
{%- else %}
{{- L('user_last_seen', {'gender': user.gender, 'date': LD(presence.lastUpdated)}) }}
{%- endif %}
{% if presence.mobile %}<span class="mobileOnlineIcon"></span>{% endif %}
</span>
<div class="clear"></div>
{% endif %}
{% endblock %}
{%block content%}
{% if movedTo is not null %}
<div class="marginsAreMessy"></div>
<div class="settingsMessage">
	{{ L('profile_moved', {'name': user | name('first')}) }}<br/>
	{% if movedTo.domain is empty %}
	<a href="{{ movedTo.profileURL }}"><b>{{ movedTo | name }}</b></a>
	{% else %}
	<a href="{{ movedTo.profileURL }}">{{ L('profile_moved_link', {'domain': movedTo.domain, 'name': movedTo | name}) }}</a>
	{% endif %}
</div>
{% elseif user.domain %}
<div class="marginsAreMessy"></div>
<div class="settingsMessage">
	{{L('incomplete_profile')}}<br/>
	<a href="{{user.url}}" target="_blank">{{L('open_on_server_X', {'domain': user.domain})}}</a>
</div>
{%endif%}
{% if user.banInfo is not null and currentUser is not null and userPermissions.hasPermission('MANAGE_USERS') %}
{% if user.domain is empty and movedTo is null %}<div class="marginsAreMessy"></div>{% endif %}
{% set banModerator=users[user.banInfo.moderatorID] %}
<div class="settingsMessage textByItself">
	{% if user.banStatus=='FROZEN' %}
	<p>{{ L('admin_user_state_frozen', {'expirationTime': user.banInfo.expiresAt is null ? L('email_account_frozen_until_first_login') : LD(user.banInfo.expiresAt)}) }}</p>
	{% elseif user.banStatus=='SUSPENDED' %}
	{% if user.domain is empty %}
	<p>{{ L('admin_user_state_suspended', {'deletionTime': LD(accountDeletionTime)}) }}</p>
	{% else %}
	<p>{{ L('admin_user_state_suspended_foreign') }}</p>
	{% endif %}
	{% elseif user.banStatus=='HIDDEN' %}
	<p>{{ L('admin_user_state_hidden') }}</p>
	{% elseif user.banStatus=='SELF_DEACTIVATED' %}
	<p>{{ L('admin_user_state_self_deactivated', {'deletionTime': LD(accountDeletionTime)}) }}</p>
	{% endif %}
	{% if user.banInfo is not null %}
	{% if user.banInfo.suspendedOnRemoteServer %}<p>{{ L('admin_user_suspended_remotely') }}</p>{% endif %}
	<p>{% if banModerator is not null %}<a href="{{ banModerator.profileURL }}">{{ banModerator | name }}</a>, {% endif %}{{ LD(user.banInfo.bannedAt()) }}</p>
	{% if user.banInfo.message is not empty %}<p>{{ L('admin_user_ban_message') }}: {{ user.banInfo.message }}</p>{% endif %}
	{% endif %}
</div>
{% endif %}
<div class="columnLayout leftNarrow" id="profileLayout">
	<!-- left column -->
	<div id="left">
		{%if user.hasAvatar%}
		{%if currentUser is not null and currentUser.id==user.id%}
		<div class="selfAvaOverlay">
			{% if avatarPvInfo is not null %}
			<a href="{{ avatarPhoto.url }}" data-pv="{{ json(avatarPvInfo) }}" onclick="return openPhotoViewer(this)">{{user | pictureForAvatar('cr')}}</a>
			{% else %}
			{{user | pictureForAvatar('cr')}}
			{% endif %}
			<div class="selfAvaActionsW">
				<ul class="selfAvaActions actionList">
					<li><a href="/settings/profile/general" class="ellipsize" onclick="new ProfilePictureLayer().show(); return false;"><span class="icon"></span>{{L('update_profile_picture')}}</a></li>
					{% if avatarPhoto is not null %}<li><a href="javascript:void(0)" onclick="new ProfilePictureLayer(null, '{{ avatarPhoto.idString }}', '{{ avatarPhoto.image.getUrlForSizeAndFormat('w', 'jpg') }}', {{ json(avatarPhoto.metadata.cropRects) }}).show(); return false;" class="ellipsize"><span class="icon thumb"></span>{{ L('avatar_edit_thumbnail') }}</a></li>{% endif %}
				</ul>
			</div>
			<div class="deleteButtonW">
				<a href="/settings/confirmRemoveProfilePicture" class="deleteButton" onclick="return ajaxConfirm('remove_profile_picture', 'confirm_remove_profile_picture', '/settings/removeProfilePicture');" data-tooltip="{{ L('remove_profile_picture') }}" aria-label="{{ L('remove_profile_picture') }}"></a>
			</div>
		</div>
		{%else%}
		{% if avatarPvInfo is not null %}
		<a href="{{ avatarPhoto.url }}" data-pv="{{ json(avatarPvInfo) }}" onclick="return openPhotoViewer(this)">{{user | pictureForAvatar('cr')}}</a>
		{% else %}
		{{user | pictureForAvatar('cr')}}
		{% endif %}
		{%endif%}
		{%else%}
		{%if currentUser is not null and currentUser.id==user.id%}
		<a href="/settings/profile/general" onclick="new ProfilePictureLayer().show(); return false;">
			<span class="ava avaPlaceholder inProfile own"></span><div class="ownProfileAvaPlaceholderLabel">{{L('upload_avatar')}}</div>
		</a>
		{%else%}
		<span class="ava avaPlaceholder inProfile"></span>
		{%endif%}
		{%endif%}
		{% if currentUser is not null and currentUser.id!=user.id and not isSelfBlocked and movedTo is null %}
		<div class="profileBelowAva">
			{% if canMessage %}
			<a href="/my/mail/compose?to={{ user.id }}" class="button withText" onclick="showMailFormBox(this); return false;">{{ L('profile_write_message') }}</a>
			{% endif %}
			{%if not(isFriend) and not(following) and not(friendRequestSent) and not(followRequested)%}
			{%if user.supportsFriendRequests%}
			{% if friendRequestRecvd %}
				<a href="/users/{{ user.id }}/respondToFriendRequest?csrf={{csrf}}&accept" class="button" data-ajax="1">{{L("add_friend")}}</a>
			{% else %}
				<a href="/users/{{ user.id }}/confirmSendFriendRequest?csrf={{csrf}}" class="button" data-ajax-box="1">{{L("add_friend")}}</a>
			{% endif %}
			{%else%}
			<a href="/users/{{ user.id }}/confirmSendFriendRequest?csrf={{csrf}}" class="button" data-ajax="1">{{L("follow")}}</a>
			{%endif%}
			{%endif%}
			{% if friendshipStatusText is not empty %}
			<div class="friendshipStatus">{{ friendshipStatusText | raw }}</div>
			{% endif %}
		</div>
		{%endif%}
		<ul class="actionList marginAfter marginBefore">
		{% if taggedPhotoCount>0 %}
			<li><a href="/users/{{ user.id }}/tagged"><span class="profileCounterWithIcon">{{ taggedPhotoCount | numberformat }}<span class="icon iconPhotos"></span></span>{{ currentUser is not null and currentUser.id==user.id ? L('photos_of_me') : L('photos_of_user', {'name': user.firstAndGender}) }}</a></li>
		{% endif %}
		{% if user.followersCount>0 %}
			<li><a href="/users/{{ user.id }}/followers"><span class="profileCounterWithIcon">{{ user.followersCount | numberformat }}<span class="icon iconFollowers"></span></span>{{L('followers')}}</a></li>
		{% endif %}
		{%if currentUser is not null and currentUser.id!=user.id%}
		{% if user.followersCount>0 or taggedPhotoCount>0 %}<li class="separator"></li>{% endif %}
		{% if isFriend %}
			<li class="popupMenuW" id="friendListsButton{{ user.id }}" data-lists="{% for listID in userLists %}{{ listID }}{% if not loop.last %},{% endif %}{% endfor %}"><a href="javascript:void(0)" onclick="showFriendListsMenu('{{ user.id }}')" class="opener">{{ L('friend_set_lists') }}</a></li>
		{% endif %}
		{%if isFriend or following or friendRequestSent or followRequested%}
			<li><a href="/users/{{ user.id }}/confirmRemoveFriend" onclick="return ajaxConfirm({%if following or followRequested%}'unfollow'{%else%}'remove_friend'{%endif%},this.dataset.confirm,'/users/{{ user.id }}/doRemoveFriend')" data-confirm="{{ L(following or followRequested ? 'confirm_unfollow_X' : 'confirm_unfriend_X', {'name': user.firstLastAndGender}) | forceEscape }}">{%if following or followRequested%}{{L('unfollow')}}{%else%}{{L('remove_friend')}}{%endif%}</a></li>
		{%endif%}
			<li><a href="/users/{{ user.id }}/{{ isBookmarked ? "removeBookmark" : "addBookmark" }}?csrf={{ csrf }}" id="profileBookmarkButton" data-ajax data-ajax-show="bookmarkLoader"><span id="profileBookmarkButtonText">{{ L(isBookmarked ? 'remove_bookmark' : 'add_bookmark') }}</span> <span class="inlineLoader" id="bookmarkLoader" style="display: none"></span></a></li>
			{% if canMute %}
			<li><a href="/users/{{ user.id }}/{{ isMuted ? 'unmute' : 'mute' }}?csrf={{ csrf }}" id="profileMuteButton" data-ajax data-ajax-show="muteLoader"><span id="profileMuteButtonText">{{ L(isMuted ? 'profile_unmute' : 'profile_mute', {'name': user.firstAndGender}) }}</span> <span class="inlineLoader" id="muteLoader" style="display: none"></span></a></li>
			{% endif %}
			{% if isBlocked %}
			<li><a href="/users/{{ user.id }}/confirmUnblock" onclick="return ajaxConfirm('unblock', this.dataset.confirm, '/users/{{ user.id }}/unblock')" data-confirm="{{ L('confirm_unblock_user_X', {'name': user.firstLastAndGender}) | forceEscape }}">{{ L('unblock_user_X', {'name': user.firstAndGender}) }}</a></li>
			{% else %}
			<li><a href="/users/{{ user.id }}/confirmBlock" onclick="return ajaxConfirm('block', this.dataset.confirm, '/users/{{ user.id }}/block')" data-confirm="{{ L('confirm_block_user_X', {'name': user.firstLastAndGender}) | forceEscape }}">{{ L('block_user_X', {'name': user.firstAndGender}) }}</a></li>
			{% endif %}
		{%endif%}
			{% if userPermissions is not null and userPermissions.canReport(user) %}
				<li><a href="/system/reportForm?type=user&id={{ user.id }}" data-ajax-box>{{ L('report') }}</a></li>
			{% endif %}
			{% if currentUser is not null %}
			{% if userPermissions.hasPermission('MANAGE_USERS') %}
				<li class="separator"></li>
				<li><a href="/users/{{ user.id }}/meminfo">{{ L('admin_manage_user') }}</a></li>
			{% endif %}
			{% endif %}
		</ul>

		<div class="profileColumnBorder">
			<div class="leftColumnBorder"></div>
		{% if mutualFriends is not empty %}
			{% include "profile_module_user_grid" with {'users': mutualFriends, 'headerTitle': L('mutual_friends'), 'headerHref': "/users/#{user.id}/friends/mutual", 'subheaderTitle': L('X_mutual_friends', {'count': mutualFriendCount})} %}
		{% endif %}
		{% if user.friendsCount>0 %}
			{% if friends is not empty %}
			{% include "profile_module_user_grid" with {'users': friends, 'headerTitle': L('friends'), 'headerHref': "/users/#{user.id}/friends", 'subheaderTitle': L('X_friends', {'count': user.friendsCount})} %}
			{% else %}
			{% include "profile_module_centered_text" with {'text': L('remote_friends_incomplete', {'name': user.firstAndGender, 'gender': user.gender, 'server': user.domain}, {'link': {'href': user.url, 'target': '_blank', 'rel': 'nofollow'} }), 'headerTitle': L('friends'), 'headerHref': "/users/#{user.id}/friends", 'subheaderTitle': L('X_friends', {'count': user.friendsCount})} %}
			{% endif %}
		{% endif %}
		{% if onlineFriends is not empty %}
			{% include "profile_module_user_grid" with {'users': onlineFriends, 'headerTitle': L('friends_online'), 'headerHref': "/users/#{user.id}/friends/online", 'subheaderTitle': L('X_friends', {'count': onlineFriendCount})} %}
		{% endif %}
		{% if albums is not empty %}
			{% include "profile_module_photo_albums" with {'albums': albums, 'headerTitle': L('photo_albums'), 'headerHref': "/users/#{user.id}/albums", 'subheaderTitle': L('X_photo_albums', {'count': photoAlbumCount}), 'ownerID': user.id} %}
		{% endif %}
		{% if user.followingCount>0 %}
			{% if followees.list is not empty %}
			{% set followingWithTitles=[] %}
			{% for followee in followees.list | length>5 ? followees.list | slice(0, 5) : followees.list %}
				{% set _=followingWithTitles.add({'user': followee, 'title': followee | actorSummary}) %}
			{% endfor %}
			{% include "profile_module_user_list" with {'users': followingWithTitles, 'headerTitle': L('following'), 'subheaderTitle': L('X_people', {'count': user.followingCount}), 'headerHref': "/users/#{user.id}/following"} %}
			{% else %}
			{% include "profile_module_centered_text" with {'text': L('remote_following_incomplete', {'name': user.firstAndGender, 'gender': user.gender, 'server': user.domain}, {'link': {'href': user.url, 'target': '_blank', 'rel': 'nofollow'} }), 'headerTitle': L('following'), 'subheaderTitle': L('X_people', {'count': user.followingCount}), 'headerHref': "/users/#{user.id}/following"} %}
			{% endif %}
		{% endif %}
		{% if groups is not empty %}
			{% include "profile_module_groups" with {'groups': groups, 'headerTitle': L('groups'), 'headerHref': "/users/#{user.id}/groups", 'subheaderTitle': L('X_groups', {'count': groups.size})} %}
		{% endif %}
		</div>
	</div>
	<!-- right column -->
	<div id="right">
		<div class="profileNameW">
			<h2>{{user | name('complete')}}</h2>
			{% if currentUser is not null and currentUser.id==user.id %}
			<div class="profileStatusW">
				<a href="javascript:void(0)" id="profileStatusLink" style="{% if user.statusText is not empty %}display: none{% endif %}" onclick="showProfileStatusBox()">{{ L('profile_update_status') }}</a>
				<div class="profileStatus editable" id="profileStatusCont" style="{% if user.statusText is empty %}display: none{% endif %}" onclick="showProfileStatusBox()" data-tooltip="{{ L('update_status') }}">{{ user.statusText }}</div>
				<form id="profileStatusBox" action="/settings/updateStatus?csrf={{ csrf }}" method="post" style="display: none" data-ajax>
					<input type="text" name="status" maxlength="100" value="{{ user.statusText }}"/>
					<div class="buttonW">
						<div>{{ L('profile_status_hint') }}</div>
						<input type="submit" value="{{ L('save') }}"/>
					</div>
				</form>
			</div>
			{% elseif user.statusText is not empty %}
			<div class="profileStatusW">{{ user.statusText }}</div>
			{% endif %}
		</div>
		<div class="profileFields">
			{% if mainFields is empty and contactsFields is empty and personalFields is empty and interestsFields is empty and (currentUser is null or currentUser.id!=user.id) %}
			<div class="empty">{{ L('profile_no_info') }}</div>
			{% endif %}
			{{ profileSection(_context, null, null, mainFields) }}
			{{ profileSection(_context, L('profile_contacts_title'), "/settings/profile/contacts", contactsFields) }}
			{{ profileSection(_context, L('profile_personal_title'), "/settings/profile/personal", personalFields) }}
			{{ profileSection(_context, L('profile_interests_title'), "/settings/profile/interests", interestsFields) }}
		</div>
		{% include "profile_module_wall" with {'wallOwner': user, 'headerTitle': L('wall'), 'headerHref': "/users/#{user.id}/wall"+(canSeeOthersPosts and user.hasWall ? "" : "/own"), 'additionalHeader': L('X_posts', {'count': totalItems}), 'additionalHeaderId': 'wallPostCount', 'wallPostCount': totalItems} %}
	</div>
</div>
{% script %}initExpandingProfileColumn(ge("right"), ge("left"), ge("profileLayout"));{% endscript %}
{% if isFriend %}{% include "friend_lists_script" %}{% endif %}
{%endblock%}